import useStyles from './style'
import { Popover, Typography, Box } from '@mui/material'
import { colors } from '@static/theme'
import { NetworkType } from '@store/consts/static'
import { addressToTicker } from '@utils/utils'
import { useState, useEffect } from 'react'
import useIsMobile from '@store/hooks/isMobile'

export interface ISwapPointsPopover {
  open: boolean
  anchorEl: HTMLElement | null
  onClose: () => void
  isPairGivingPoints: boolean
  network: NetworkType
  promotedSwapPairs: { tokenX: string; tokenY: string }[]
}

export const SwapPointsPopover = ({
  open,
  anchorEl,
  onClose,
  network,
  isPairGivingPoints,
  promotedSwapPairs
}: ISwapPointsPopover) => {
  const { classes } = useStyles()
  const [animationTriggered, setAnimationTriggered] = useState(false)
  const isMobile = useIsMobile()

  useEffect(() => {
    if (open && !animationTriggered) {
      const ANIM_TIME = 500
      const timer = setTimeout(() => {
        setAnimationTriggered(true)
      }, ANIM_TIME)
      return () => clearTimeout(timer)
    }
  }, [open])

  if (!anchorEl) return null

  return (
    <Popover
      open={open}
      anchorEl={anchorEl}
      classes={{
        paper: classes.paper,
        root: !isMobile ? classes.popover : undefined
      }}
      onClose={onClose}
      anchorOrigin={{
        vertical: 'bottom',
        horizontal: 'center'
      }}
      disableRestoreFocus
      slotProps={{
        paper: {
          onMouseLeave: onClose
        }
      }}
      transformOrigin={{
        vertical: 'top',
        horizontal: 'center'
      }}
      marginThreshold={isMobile ? 0 : 16}>
      <div className={classes.backgroundContainer}>
        <div className={isPairGivingPoints ? classes.explanationContainer : classes.halfContainer}>
          {isPairGivingPoints ? (
            <>
              <Typography className={classes.sectionTitle}>
                Estimated points for completing this swap.
              </Typography>
              <Typography className={classes.standardText}>
                The number of points you will receive depends on the fees your swap generates for
                liquidity providers.
              </Typography>
              <Typography className={classes.sectionTitle}>
                How are swap points calculated?
              </Typography>
              <Typography className={classes.standardText}>
                Swap points are allocated based on the fees generated by a swap, rather than the
                swap volume. This approach ensures that the volume on Invariant reflects genuine
                activity from regular swaps and discourages artificial volume generation in
                low-fee-tier pools.
              </Typography>
            </>
          ) : (
            <>
              <Typography className={classes.errorText}>
                This pair is not currently distributing points.
              </Typography>
              <Typography className={classes.standardText}>
                Swapping to a points distributing pair can earn you points for the leaderboard. To
                learn more, check out the Points tab.
              </Typography>
            </>
          )}
        </div>
        <Box
          sx={{
            width: '2px',
            backgroundColor: colors.invariant.light,
            alignSelf: 'stretch'
          }}
        />
        <div
          className={isPairGivingPoints ? classes.promotedSwapsContainer : classes.halfContainer}>
          <Typography className={classes.standardText}>
            Pairs currently distributing swap points:
          </Typography>
          <Box className={classes.ticker}>
            {promotedSwapPairs.map(item => (
              <Typography className={classes.listText}>
                â€¢ {addressToTicker(network, item.tokenX.toString())}/
                {addressToTicker(network, item.tokenY.toString())}
              </Typography>
            ))}
          </Box>
        </div>
      </div>
    </Popover>
  )
}

export default SwapPointsPopover
