import useStyles from './style'
import { Typography, Box } from '@mui/material'
import { colors } from '@static/theme'
import { NetworkType } from '@store/consts/static'
import { addressToTicker } from '@utils/utils'

import { TooltipHover } from '@common/TooltipHover/TooltipHover'

export interface ISwapPointsPopover {
  isPairGivingPoints: boolean
  network: NetworkType
  promotedSwapPairs: { tokenX: string; tokenY: string }[]
  children: React.ReactElement<any, any>
}

export const SwapPointsPopover = ({
  network,
  isPairGivingPoints,
  promotedSwapPairs,
  children
}: ISwapPointsPopover) => {
  const { classes } = useStyles()

  return (
    <TooltipHover
      componentsProps={{
        tooltip: {
          sx: {
            '@media (max-width:671px)': {
              maxWidth: '100vw',
              marginLeft: '8px',
              marginRight: '8px'
            }
          }
        },
        popper: {
          modifiers: [
            {
              name: 'preventOverflow',
              options: {
                boundary: 'viewport',
                altAxis: true
              }
            }
          ]
        }
      }}
      title={
        <div className={classes.backgroundContainer}>
          <div
            className={isPairGivingPoints ? classes.explanationContainer : classes.halfContainer}>
            {isPairGivingPoints ? (
              <>
                <Typography className={classes.sectionTitle}>
                  Estimated points for completing this swap.
                </Typography>
                <Typography className={classes.standardText}>
                  The number of points you will receive depends on the fees your swap generates for
                  liquidity providers.
                </Typography>
                <Typography className={classes.sectionTitle}>
                  How are swap points calculated?
                </Typography>
                <Typography className={classes.standardText}>
                  Swap points are allocated based on the fees generated by a swap, rather than the
                  swap volume. This approach ensures that the volume on Invariant reflects genuine
                  activity from regular swaps and discourages artificial volume generation in
                  low-fee-tier pools.
                </Typography>
              </>
            ) : (
              <>
                <Typography className={classes.errorText}>
                  This pair is not currently distributing points.
                </Typography>
                <Typography className={classes.standardText}>
                  Swapping to a points distributing pair can earn you points for the leaderboard. To
                  learn more, check out the Points tab.
                </Typography>
              </>
            )}
          </div>
          <Box
            sx={{
              width: '2px',
              backgroundColor: colors.invariant.light,
              alignSelf: 'stretch'
            }}
          />
          <div
            className={isPairGivingPoints ? classes.promotedSwapsContainer : classes.halfContainer}>
            <Typography className={classes.standardText}>
              Pairs (all fee tiers) currently distributing swap points:
            </Typography>
            <Box display={'flex'} gap={'4px'} flexDirection={'column'} padding={'4px'}>
              {promotedSwapPairs.map(item => (
                <Typography key={item.tokenX + item.tokenY} className={classes.listText}>
                  â€¢ {addressToTicker(network, item.tokenX.toString())}/
                  {addressToTicker(network, item.tokenY.toString())}
                </Typography>
              ))}
            </Box>
          </div>
        </div>
      }
      placement='bottom'
      maxWidth={519}>
      {children}
    </TooltipHover>
  )
}

export default SwapPointsPopover
